# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: hezuo

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "<=1.9.0"

custom:
  namespace: ${self:service}-${self:custom.stage}
  stage: ${opt:stage, self:provider.stage}

provider:
  name: aws
  runtime: nodejs4.3
  stage: dev
  region: ap-southeast-2
  environment:
    APP_NAME: ${self:service}
    CLIENT_ID: '157101368513.159794061927'
    CLIENT_SECRET: '0f2f97078a2b830b78f1d7b2bce3bf42'
    INSTALL_SUCCESS_URL: https://s3-ap-southeast-2.amazonaws.com/aws-davidiog-syd-hezuo/static/success.html
    INSTALL_ERROR_URL: https://s3-ap-southeast-2.amazonaws.com/aws-davidiog-syd-hezuo/static/error.html
    NAMESPACE: ${self:custom.namespace}
    SLACK_TABLE: ${self:custom.namespace}-slack-bot
    VERIFICATION_TOKEN: 'nE5UYmMCaQGEFnNnZZqMZXha'
    TEAMS_TABLE: ${self:custom.namespace}-teams
    MEMBERS_TABLE: ${self:custom.namespace}-members
    ACTIVITY_TABLE: ${self:custom.namespace}-activity
    CEU_TABLE: ${self:custom.namespace}-ceu


  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: 
        - arn:aws:dynamodb:*:*:table/${self:provider.environment.SLACK_TABLE}
    - Effect: Allow
      Action:
        - lambda:invokeFunction
      Resource: 
        - arn:aws:lambda:*:*:function:${self:custom.namespace}-actions
        - arn:aws:lambda:*:*:function:${self:custom.namespace}-parser
        - arn:aws:lambda:*:*:function:${self:custom.namespace}-add-activity
        - arn:aws:lambda:*:*:function:${self:custom.namespace}-test
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here


# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  test:
    handler: test.handler
  add-activity:
    handler: add-activity.handler
  parser:
    handler: parser.handler
  actions:
    handler: actions.handler
  events:
    handler: events.handler
    events:
      - http:
          path: events
          method: post
  install:
    handler: install.handler
    events:
      - http:
          path: install
          method: get
  
  
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    HezuoMembersDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.MEMBERS_TABLE}
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    HezuoTeamsDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TEAMS_TABLE}
        AttributeDefinitions:
          - AttributeName: team_name
            AttributeType: S
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: team_name
            KeyType: HASH
          - AttributeName: username
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    HezuoCEUDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CEU_TABLE}
        AttributeDefinitions:
          - AttributeName: ceu_name
            AttributeType: S
        KeySchema:
          - AttributeName: ceu_name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    HezuoActivityDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ACTIVITY_TABLE}
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
          - AttributeName: updated_at
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
          - AttributeName: updated_at
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    SlackBotDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.SLACK_TABLE}
        AttributeDefinitions:
          - AttributeName: team_id
            AttributeType: S
        KeySchema:
          - AttributeName: team_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"